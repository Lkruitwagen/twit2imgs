# This is a sample workflow to test or replace with your source code.
#
main:
    params: [args]
    steps:
    - init:
        assign:
          - projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - region: "europe-west6"
          - batchApi: "batch.googleapis.com/v1"
          - batchApiUrl: ${"https://" + batchApi + "/projects/" + projectId + "/locations/" + region + "/jobs"}
          - imageUri: ${"gcr.io/beautiful-s2/beautiful-s2:latest"}
          - jobId: ${"beautiful-s2-prod-" + string(int(sys.now()))}
    - createAndRunBatchJob:
        call: http.post
        args:
          url: ${batchApiUrl}
          query:
            job_id: ${jobId}
          headers:
            Content-Type: application/json
          auth:
            type: OAuth2
          body:
            taskGroups:
              taskSpec:
                computeResource:
                  cpuMilli: "4000"
                  memoryMib: "8192"
                runnables:
                  - container:
                      imageUri: ${imageUri}
                      entrypoint: ""
                      commands: ["scrape-tweets", "beautiful_s2"]
                    environment:
                      variables:
                        TWITTER_API_BEARER_TOKEN: <your-twitter-api-bearer-token>
                        TOKEN: <your-google-photos-access-token>
                        REFRESH_TOKEN: <your-google-photos-refresh-token>
                        TOKEN_URI: https://oauth2.googleapis.com/token
                        CLIENT_ID: <your-google-app-client-id>
                        CLIENT_SECRET: <your-google-app-client-secret>
                        SLACKBOT_TOKEN: <your-optional-slackbot-token>
                        SLACKBOT_CHANNEL: <your-optional-slack-channel>
                volumes: []
              taskCount: 1
              parallelism: 1
            allocationPolicy:
              instances:
                - policy:
                    provisioningModel: "STANDARD"
                    machineType: "e2-standard-4"
            logsPolicy:
              destination: CLOUD_LOGGING
        result: createAndRunBatchJobResponse
    - getJob:
        call: http.get
        args:
          url: ${batchApiUrl + "/" + jobId}
          auth:
            type: OAuth2
        result: getJobResult
    - logState:
        call: sys.log
        args:
          data: ${"Current job state " + getJobResult.body.status.state}
    - checkState:
        switch:
          - condition: ${getJobResult.body.status.state == "SUCCEEDED"}
            next: logDeleteBatchJob
          - condition: ${getJobResult.body.status.state == "FAILED"}
            next: doFailure
        next: sleep
    - sleep:
        call: sys.sleep
        args:
          seconds: 30
        next: getJob
    # You can delete the batch job or keep it for debugging
    - logDeleteBatchJob:
        call: sys.log
        args:
          data: ${"Deleting the batch job " + jobId}
    - deleteBatchJob:
        call: http.delete
        args:
          url: ${batchApiUrl + "/" + jobId}
          auth:
            type: OAuth2
        result: deleteBatchJob
    - doSuccess:
        return:
          jobId: ${jobId}
    - doFailure:
        raise:
          message: ${"The underlying batch job " + jobId + " failed"}
